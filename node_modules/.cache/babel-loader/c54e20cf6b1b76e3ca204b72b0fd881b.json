{"ast":null,"code":"var _jsxFileName = \"/Users/bray/Desktop/Projects/s2-download/src/js/components/AccessForm.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { saveLevel } from \"../actions/index\";\nimport { READERS } from \"../constants/readers\";\nimport '../../App.css';\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    saveLevel: level => dispatch(saveLevel(level))\n  };\n}\n\nclass ConnectedForm extends Component {\n  constructor(props) {\n    super(props);\n    this.inputName = React.createRef();\n    this.inputDescription = React.createRef();\n    this.inputReader = React.createRef();\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.handleChangeDescription = this.handleChangeDescription.bind(this);\n    this.handleChangeReader = this.handleChangeReader.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentWillReceiveProps(newProps) {\n    console.log(newProps);\n\n    try {\n      this.inputName.value = newProps.currentLevel.name;\n      this.inputDescription.value = newProps.currentLevel.Description;\n      this.inputReader.value = newProps.currentLevel.readerId;\n    } catch {} // if( newProps.profileImage !== this.props.profileImage ) /* do stuff */\n\n  }\n\n  handleChangeName(event) {\n    this.inputName.value = event.target.value;\n    console.log(this.inputName.value);\n  }\n\n  handleChangeDescription(event) {\n    this.inputDescription.value = event.target.value;\n    console.log(this.inputDescription.value);\n  }\n\n  handleChangeReader(event) {\n    this.inputReader.value = event.target.value;\n    console.log(this.inputReader.value);\n  }\n\n  handleSubmit() {\n    // event.preventDefault();\n    const {\n      title\n    } = this.props;\n    const inputs = {}; //console.log(this.props);\n\n    inputs.id = this.props.currentId;\n    inputs.name = this.inputName.value;\n    inputs.Description = this.inputDescription.value;\n    inputs.readerId = parseInt(this.inputReader.value);\n    console.log('inputs');\n    console.log(inputs);\n    this.props.saveLevel(inputs);\n  }\n\n  render() {\n    const selected = READERS.map(function (reader, index) {\n      return React.createElement(\"option\", {\n        value: reader.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, reader.name);\n    });\n    const readerSelect = React.createElement(\"select\", {\n      onChange: this.handleChangeReader,\n      ref: userInput => this.inputReader = userInput,\n      defaultValue: this.props.currentLevel.readerId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"All Readers\"), selected);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      class: \"levelForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"field-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Name:\"), React.createElement(\"div\", {\n      class: \"field-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      ref: userInput => this.inputName = userInput,\n      onChange: this.handleChangeName,\n      defaultValue: this.props.currentLevel.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      class: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"field-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Description:\"), React.createElement(\"div\", {\n      class: \"field-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      type: \"text\",\n      ref: userInput => this.inputDescription = userInput,\n      onChange: this.handleChangeDescription,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.props.currentLevel.Description))), React.createElement(\"div\", {\n      class: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"field-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Reader(s):\"), React.createElement(\"div\", {\n      class: \"field-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, readerSelect)), React.createElement(\"div\", {\n      class: \"form-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Save\"), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Cancel\"))));\n  }\n\n}\n\nconst AccessForm = connect(null, mapDispatchToProps)(ConnectedForm);\nexport default AccessForm;","map":{"version":3,"sources":["/Users/bray/Desktop/Projects/s2-download/src/js/components/AccessForm.js"],"names":["React","Component","connect","saveLevel","READERS","mapDispatchToProps","dispatch","level","ConnectedForm","constructor","props","inputName","createRef","inputDescription","inputReader","handleChangeName","bind","handleChangeDescription","handleChangeReader","handleSubmit","componentWillReceiveProps","newProps","console","log","value","currentLevel","name","Description","readerId","event","target","title","inputs","id","currentId","parseInt","render","selected","map","reader","index","readerSelect","userInput","AccessForm"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { saveLevel } from \"../actions/index\";\nimport { READERS } from \"../constants/readers\";\nimport '../../App.css';\nfunction mapDispatchToProps(dispatch) {\n  return {\n    saveLevel: level => dispatch(saveLevel(level))\n  };\n}\n\n\n\nclass ConnectedForm extends Component {\n  constructor(props) {\n    super(props);\n    this.inputName = React.createRef();\n    this.inputDescription = React.createRef();\n    this.inputReader = React.createRef();\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.handleChangeDescription = this.handleChangeDescription.bind(this);\n    this.handleChangeReader = this.handleChangeReader.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentWillReceiveProps (newProps) {\n    console.log(newProps);\n    try {\n    this.inputName.value = newProps.currentLevel.name;\n    this.inputDescription.value = newProps.currentLevel.Description;\n    this.inputReader.value = newProps.currentLevel.readerId;\n    } catch {\n      \n    }\n   // if( newProps.profileImage !== this.props.profileImage ) /* do stuff */\n  }\n\n  handleChangeName(event) {\n    this.inputName.value = event.target.value;\n    console.log(this.inputName.value);\n  }\n\n  handleChangeDescription(event) {\n    this.inputDescription.value = event.target.value;\n    console.log(this.inputDescription.value);\n  }\n\n  handleChangeReader(event) {\n    this.inputReader.value = event.target.value;\n    console.log(this.inputReader.value);\n  }\n\n\n  handleSubmit() {\n   // event.preventDefault();\n\n    const { title } = this.props;\n    const inputs = {};\n\n\n    //console.log(this.props);\n    inputs.id = this.props.currentId;\n    inputs.name = this.inputName.value;\n    inputs.Description = this.inputDescription.value;\n    inputs.readerId = parseInt(this.inputReader.value);\n    console.log('inputs');\n    console.log(inputs);\n    \n    this.props.saveLevel(inputs);\n    \n    \n  }\n  render() {\n    const selected = READERS.map(function(reader, index) {\n      return <option value={reader.id}>{reader.name}</option>\n    });\n    const readerSelect = \n      <select \n        onChange={this.handleChangeReader}\n        ref={(userInput) => this.inputReader = userInput}\n        defaultValue={this.props.currentLevel.readerId}>\n        <option value=\"0\">All Readers</option>\n        {selected}\n      </select>\n      \n    return (\n      <>\n        <div class=\"levelForm\">\n          <div class=\"form-row\">\n            <div class=\"field-name\">Name:</div>\n            <div class=\"field-wrapper\">\n              <input\n                type=\"text\"\n                ref={(userInput) => this.inputName = userInput}\n                onChange={this.handleChangeName}\n                defaultValue={this.props.currentLevel.name}\n              />\n            </div>\n          </div>\n          <div class=\"form-row\">\n            <div class=\"field-name\">Description:</div>\n              <div class=\"field-wrapper\">\n                <textarea\n                  type=\"text\"\n                  ref={(userInput) => this.inputDescription = userInput}\n                  onChange={this.handleChangeDescription}>\n                    {this.props.currentLevel.Description}\n                </textarea>\n              </div>\n          </div>\n          <div class=\"form-row\">\n            <div class=\"field-name\">Reader(s):</div>\n            <div class=\"field-wrapper\">\n              {readerSelect}\n            </div>\n          </div>\n          <div class=\"form-row\">\n            <button type=\"submit\" onClick={this.handleSubmit}>Save</button>\n            <button type=\"submit\" onClick={this.handleSubmit}>Cancel</button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst AccessForm = connect(\n  null,\n  mapDispatchToProps,\n)(ConnectedForm);\n\nexport default AccessForm;"]},"metadata":{},"sourceType":"module"}