{"ast":null,"code":"import { SAVE_LEVEL, LOAD_ACCESS_LEVELS, SET_ID, GET_ID } from \"../constants/action-types\";\nimport { READERS, READER_TYPES } from \"../constants/readers\";\nimport accessLevels from '../../data/accessLevels.json';\nconst accessLevelsMap = accessLevels.map(function (val, index) {\n  let reader = READERS.find(obj => obj.id == val.readerId);\n  let type = READER_TYPES.find(obj => obj.id == reader.typeId);\n  val.readerName = reader.name;\n  val.readerType = type.name;\n  return val;\n});\nconst initialJson = accessLevels[0];\nconst initialState = {\n  accessLevels: accessLevelsMap,\n  currentId: 1,\n  currentLevel: initialJson,\n  readers: READERS,\n  readerTypes: READER_TYPES\n};\n\nfunction rootReducer(state = initialState, action) {\n  if (action.type === SAVE_LEVEL) {\n    let formValues = action.payload;\n    let reader = '';\n    let type = '';\n    const AccessLevelArray = state.accessLevels.map(function (val, index) {\n      if (val.id == formValues.id) {\n        val.name = formValues.name;\n        val.Description = formValues.Description;\n        val.readerId = formValues.readerId;\n        reader = READERS.find(obj => obj.id == val.readerId);\n        type = READER_TYPES.find(obj => obj.id == reader.typeId);\n        val.readerName = reader.name;\n        val.readerType = type.name;\n      }\n\n      return val;\n    });\n    return Object.assign({}, state, {\n      accessLevels: AccessLevelArray\n    });\n  }\n\n  if (action.type === LOAD_ACCESS_LEVELS) {\n    return Object.assign({}, state, {\n      accessLevels: state.accessLevels.concat(action.payload)\n    });\n  }\n\n  if (action.type === SET_ID) {\n    let indexVal = 0;\n    let newJson = state.accessLevels.map(function (val, index) {\n      if (val.id == action.payload) {\n        indexVal = index;\n      }\n    });\n    newJson = state.accessLevels[indexVal];\n    return Object.assign({}, state, {\n      currentId: action.payload,\n      currentLevel: newJson\n    });\n  }\n\n  if (action.type === GET_ID) {\n    return Object.assign({}, state, {});\n  }\n\n  return state;\n}\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/bray/Desktop/Projects/s2-download/src/js/reducers/index.js"],"names":["SAVE_LEVEL","LOAD_ACCESS_LEVELS","SET_ID","GET_ID","READERS","READER_TYPES","accessLevels","accessLevelsMap","map","val","index","reader","find","obj","id","readerId","type","typeId","readerName","name","readerType","initialJson","initialState","currentId","currentLevel","readers","readerTypes","rootReducer","state","action","formValues","payload","AccessLevelArray","Description","Object","assign","concat","indexVal","newJson"],"mappings":"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","sourcesContent":["import { SAVE_LEVEL, LOAD_ACCESS_LEVELS, SET_ID, GET_ID} from \"../constants/action-types\";\nimport { READERS, READER_TYPES } from \"../constants/readers\";\nimport accessLevels from '../../data/accessLevels.json';\nconst accessLevelsMap = accessLevels.map(function(val, index) { \n  let reader = READERS.find(obj => obj.id == val.readerId);\n  let type = READER_TYPES.find(obj => obj.id == reader.typeId);\n  val.readerName = reader.name;\n  val.readerType = type.name;\n  return val; \n});\nconst initialJson = accessLevels[0];\nconst initialState = {\n  accessLevels: accessLevelsMap,\n  currentId: 1,\n  currentLevel: initialJson,\n  readers: READERS,\n  readerTypes: READER_TYPES\n};\n\nfunction rootReducer(state = initialState, action) {\n  if (action.type === SAVE_LEVEL) {\n    let formValues = action.payload; \n    let reader = '';\n    let type = '';\n\n    const AccessLevelArray = state.accessLevels.map(function(val, index) { \n      if (val.id == formValues.id) {\n        val.name = formValues.name;\n        val.Description = formValues.Description;\n        val.readerId = formValues.readerId;\n        reader = READERS.find(obj => obj.id == val.readerId);\n        type = READER_TYPES.find(obj => obj.id == reader.typeId);\n        val.readerName = reader.name;\n        val.readerType = type.name;\n      }\n      return val;\n    });\n   \n    return Object.assign({}, state, {\n     accessLevels: AccessLevelArray\n    });\n  }\n \n  if (action.type === LOAD_ACCESS_LEVELS) {\n    return Object.assign({}, state, {\n      accessLevels: state.accessLevels.concat(action.payload)\n    });\n  }\n  if (action.type === SET_ID) {\n    let indexVal = 0;\n    let newJson = state.accessLevels.map(function(val, index){ \n      if (val.id == action.payload) {\n        indexVal = index;\n      }\n    })\n\n    newJson = state.accessLevels[indexVal];\n    return Object.assign({}, state, {\n      currentId: action.payload,\n      currentLevel: newJson\n    });\n  }\n  if (action.type === GET_ID) {\n    return Object.assign({}, state, {\n    });\n  }\n  return state;\n}\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}